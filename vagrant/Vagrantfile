# -*- mode: ruby -*-
# vi: set ft=ruby :
require 'ipaddr'
require 'yaml'
# ENV
ENV["LC_ALL"] = "en_US.UTF-8"

# 读取yaml配置
if File.exists?(File.join(File.dirname(__FILE__), "local_config.yaml")) then
    puts "Using local configuration file"
    x = YAML.load_file(File.join(File.dirname(__FILE__), "local_config.yaml"))
else
    x = YAML.load_file(File.join(File.dirname(__FILE__), 'config.yaml'))
end
puts "Config: #{x.inspect}\n\n"

# 主配置文件
Vagrant.configure(2) do |config|
  ##### 全局配置
  # OS版本选择
  # 从配置中读取box模板
  config.vm.box = x.fetch('box')
  # share folder
  # config.vm.synced_folder "../data", "/vagrant_data"
  # box proxy setting
  if Vagrant.has_plugin?("vagrant-proxyconf")
    config.proxy.http     = x.fetch('http_proxy')
    config.proxy.https    = x.fetch('http_proxy')
    config.proxy.no_proxy = x.fetch('no_proxy')
    # config.proxy.enabled = { docker: false }
  end

  ##### server配置
  # server配置部分，循环创建server节点
  server_ip = IPAddr.new(x.fetch('ip').fetch('server'))
  (1..x.fetch('server').fetch('count')).each do |i|
    c = x.fetch('server')
    hostname = "server-%02d" % i
    config.vm.define hostname do |server|
      # 配置hostname
      server.vm.hostname = hostname
      # 根据不同provide配置cpu mem
      # virtualbox
      server.vm.provider "virtualbox" do |v|
        v.cpus = c.fetch('cpus')
        v.linked_clone = true
        v.memory = c.fetch('memory')
        v.name = hostname
        v.gui = true
        if Vagrant.has_plugin?("vagrant-vbguest")
          server.vbguest.auto_update = false
        end
      end
      # vmware
      server.vm.provider "vmware_desktop" do |v|
        v.vmx["memsize"] = c.fetch('memory')
        v.vmx["numvcpus"] = c.fetch('cpus')
        v.linked_clone = true
        v.gui = true
      end
      # hyper-v
      server.vm.provider "hyperv" do |v|
        # 链接克隆，速度会快一点，可选
        # v.enable_virtualization_extensions = true
        v.linked_clone = true
        # 启用如下之后，可以通过Copy-VMFile拷贝文件到虚拟机
        v.vm_integration_services = {
          guest_service_interface: true  #<---------- this line enables Copy-VMFile
        }
        v.cpus = c.fetch('cpus')
        v.maxmemory = c.fetch('memory')
        v.memory = "512"
        v.vmname = hostname
      end
      # box的IP配置
      # server.vm.network "private_network", ip: IPAddr.new(server_ip.to_i + i - 1, Socket::AF_INET).to_s
      # passing the variable to shell
      # https://stackoverflow.com/questions/15461898/passing-variable-to-a-shell-script-provisioner-in-vagrant
      # set STATIC IP for vagrant default nat network adapter
      ipaddr=IPAddr.new(server_ip.to_i + i - 1, Socket::AF_INET).to_s
      server.vm.provision "shell", run: "always", args: [ ipaddr ], inline: <<-SHELL
        echo $(date +%FT%T) shell begin
        # sudo nmcli connection add type ethernet ifname ens32 ipv4.method manual ipv4.addresses 10.10.10.101/24 ipv4.gateway 10.10.10.2 ipv4.dns 223.5.5.5
        ipaddr=$1
        sudo nmcli connection add type ethernet \
          ifname $(cd /sys/class/net/; echo e*) \
          ipv4.method manual \
          ipv4.addresses ${ipaddr}/24 \
          ipv4.gateway ${ipaddr%.*}.2 \
          ipv4.dns ${ipaddr%.*}.2
        sudo nmcli con reload
        sudo nmcli con del $(cd /sys/class/net/; echo e*)
        echo $(date +%FT%T) shell end
      SHELL
    end
  end
  
  ##### node配置
  # node配置部分，循环创建node节点
  node_ip = IPAddr.new(x.fetch('ip').fetch('node'))
  (1..x.fetch('node').fetch('count')).each do |i|
    c = x.fetch('node')
    hostname = "node-%02d" % i
    config.vm.define hostname do |node|
      # 配置hostname
      node.vm.hostname = hostname
      # 根据不同provide配置cpu mem
      # virtualbox
      node.vm.provider "virtualbox" do |v|
        v.cpus = c.fetch('cpus')
        v.linked_clone = true
        v.memory = c.fetch('memory')
        v.name = hostname
        v.gui = true
        if Vagrant.has_plugin?("vagrant-vbguest")
          node.vbguest.auto_update = false
        end
      end
      # vmware
      node.vm.provider "vmware_desktop" do |v|
        v.vmx["memsize"] = c.fetch('memory')
        v.vmx["numvcpus"] = c.fetch('cpus')
        v.linked_clone = true
        v.gui = true
      end
      # hyper-v
      node.vm.provider "hyperv" do |v|
        # 链接克隆，速度会快一点，可选
        # v.enable_virtualization_extensions = true
        v.linked_clone = true
        # 启用如下之后，可以通过Copy-VMFile拷贝文件到虚拟机
        v.vm_integration_services = {
          guest_service_interface: true  #<---------- this line enables Copy-VMFile
        }
        v.cpus = c.fetch('cpus')
        v.maxmemory = c.fetch('memory')
        v.memory = "512"
        v.vmname = hostname
      end
      # box的IP配置
      # node.vm.network "private_network", ip: IPAddr.new(node_ip.to_i + i - 1, Socket::AF_INET).to_s
      # passing the variable to shell
      # https://stackoverflow.com/questions/15461898/passing-variable-to-a-shell-script-provisioner-in-vagrant
      # set STATIC IP for vagrant default nat network adapter
      ipaddr=IPAddr.new(node_ip.to_i + i - 1, Socket::AF_INET).to_s
      node.vm.provision "shell", run: "always", args: [ ipaddr ], inline: <<-SHELL
        echo $(date +%FT%T) shell begin
        # sudo nmcli connection add type ethernet ifname ens32 ipv4.method manual ipv4.addresses 10.10.10.101/24 ipv4.gateway 10.10.10.2 ipv4.dns 223.5.5.5
        ipaddr=$1
        sudo nmcli connection add type ethernet \
          ifname $(cd /sys/class/net/; echo e*) \
          ipv4.method manual \
          ipv4.addresses ${ipaddr}/24 \
          ipv4.gateway ${ipaddr%.*}.2 \
          ipv4.dns ${ipaddr%.*}.2
        sudo nmcli con reload
        sudo nmcli con del $(cd /sys/class/net/; echo e*)
        echo $(date +%FT%T) shell end
      SHELL
    end
  end

  # server和node的hosts配置
  config.vm.provision "shell", path: "add_hosts.sh", args: [ x.fetch('ip').fetch('server'), x.fetch('server').fetch('count'), x.fetch('ip').fetch('node'), x.fetch('node').fetch('count') ]
end


# vagrant up --provider virtualbox

# vagrant ssh-config | Out-File ~/.ssh/config # 直接 output有问题， 建议用如下两行
# Add-Content "\n"  ~/.ssh/config
# vagrant ssh-config | Add-Content ~/.ssh/config
